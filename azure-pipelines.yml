trigger:
  branches:
    include:
      - main
      - dev
      - aman-r2.4_Prod

pool:
  vmImage: "ubuntu-latest"

variables:
  nodeVersion: "20.x"

stages:
  
  - stage: Test
    displayName: 'Test Stage'
    jobs:
      
      - job: FrontendTests
        displayName: 'Run Frontend Tests'
        steps:
          
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: 'Install Node.js'

          - script: npm install
            displayName: 'Install root dependencies'

          - script: npm install
            displayName: 'Install client dependencies'
            workingDirectory: 'client' 

          - script: npm test
            displayName: 'Run client tests'
            workingDirectory: 'client'

      - job: BackendTests
        displayName: 'Run Backend Tests'
        steps:
          
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: 'Install Node.js'

          - script: npm install
            displayName: 'Install root dependencies'

          - script: npm install
            displayName: 'Install server dependencies'
            workingDirectory: 'server'
          
          - script: |
              rm -rf dist
              rm -rf node_modules/.cache
              npm test -- --clearCache
            displayName: 'Clean caches and run tests'
            workingDirectory: 'server'

  - stage: Build
    displayName: 'Build Stage'
    dependsOn: Test 
    jobs:
      
      - job: BuildApplication
        displayName: 'Build Application'
        steps:
          
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: 'Install Node.js'

          - script: npm install
            displayName: 'Install root dependencies'
          
          - script: |
              npm install
              npm run build
            displayName: 'Build client'
            workingDirectory: 'client'

          - script: |
              npm install
              npx prisma generate
              npm run build
            displayName: 'Build server'
            workingDirectory: 'server'
            
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)'
              ArtifactName: 'asd-app'
              publishLocation: 'Container'
            displayName: 'Publish application artifacts'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Build
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/dev-2')))
    jobs:
      - deployment: DeployToAzure
        displayName: 'Deploy to Azure App Service'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                - task: NodeTool@0
                  inputs:
                    versionSpec: $(nodeVersion)
                  displayName: 'Install Node.js'

                # Build client
                - script: |
                    cd client
                    npm install
                    npm run build
                  displayName: 'Build client for production'

                # Build server
                - script: |
                    cd server
                    npm install
                    npx prisma generate
                    npm run build
                  displayName: 'Build server for production'

                # Deploy to Azure Web App
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'Azure-App-Service-Connection'
                    appType: 'webAppLinux'
                    appName: 'asd-app-aman2025'
                    package: '$(System.DefaultWorkingDirectory)'
                    runtimeStack: 'NODE|20-lts'
                    startUpCommand: 'cd server && npm start'
                  displayName: 'Deploy to Azure App Service'