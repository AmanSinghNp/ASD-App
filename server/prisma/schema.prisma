// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String   @default("Unknown")
  email        String   @unique
  passwordHash String
  role         String   @default("CUSTOMER")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  carts Cart[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  category    String
  priceCents  Int
  stockQty    Int
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("OPEN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id             String      @id @default(cuid())
  userId         String?
  deliveryMethod String
  addressLine1   String?
  suburb         String?
  state          String?
  postcode       String?
  slotStart      DateTime?
  slotEnd        DateTime?
  status         String      @default("Processing")
  totalCents     Int         @default(0)
  items          OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  productId      String
  nameAtPurchase String
  priceCents     Int
  quantity       Int
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}
